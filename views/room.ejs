<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const roomId = "<%= id %>"
        var socket = io()
        var peer = new Peer()
        var name = localStorage.getItem('username')

        var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            
            getUserMedia({video: true, audio: true}, (mystream) => {
                
                let video = document.createElement('video')
                video.muted =true
                video.srcObject = mystream
                video.addEventListener('loadedmetadata',  () => {
                        video.play();
                })
                document.querySelector('#videos').appendChild(video)

                peer.on('call',(call)=>{
                    call.answer(mystream)
                    let video = document.createElement('video')
                    call.on('stream', (remoteStream) => {
                        video.srcObject = remoteStream
                        video.addEventListener('loadedmetadata',  () => {
                                video.play();
                        })
                        document.querySelector('#videos').appendChild(video)
                    });
                })

                socket.on('new-peer',(peerId)=>{
                    const call = peer.call(peerId, mystream)
                    let video = document.createElement('video')
                    call.on('stream', (remoteStream) => {
                        video.srcObject = remoteStream
                        video.addEventListener('loadedmetadata',  () => {
                            video.play();
                        })
                        document.querySelector('#videos').appendChild(video)
                    });
                })

            }, function(err) {
                console.log('Failed to get local stream' ,err);
            });

            document.addEventListener('DOMContentLoaded', ()=>{
                let form = document.querySelector('#textbox')
                let input = document.querySelector('#input')
                let messages = document.querySelector('#messages')

                form.addEventListener('submit',(f)=>{
                    f.preventDefault()
                    if(input.value)
                    {
                        socket.emit('send message',{
                            roomId: roomId,
                            message: name+": "+input.value
                        })
                        input.value='';
                    }
                })

                socket.on('new-message',(msg)=>{
                    console.log(msg)
                    let item = document.createElement('li');
                    item.textContent = msg;
                    messages.appendChild(item);
                })
                
            })

            peer.on('open',(id)=>{
            console.log(id)
            socket.emit('new-participant',{
                roomId: roomId,
                peerId: id
            })
        })
        
    </script>

    <style>
        #videos{
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            width: 100%;
        }
        body{
            background-color:azure;
            margin: 0 0 55px 0;
        }
        video{
            height: 300px;
            width: 400px;
            object-fit: cover;
            padding: 8px;
        }
        .nav{
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 100px;
            display: flex;
            justify-content: center;
        }
        .upper{
            display: flex;
        }
        /* #messages{
            max-width: 300px;
            width: 300px;
        } */
        form{
            /* max-width: 350px; */
            margin: auto;
            
            /* background-color: white; */
        }
        .chatbox{
            width:300px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="display-6 mt-4 mb-4">Teams (clone)</h1>
    <div class="container upper">
        
        <div id="videos">

        </div>
        <div class="chatbox">
            <ul id="messages"></ul>
            <form id="textbox" action="">
                <input class="form-control" id="input" autocomplete="off" placeholder="text-message"/>
                <button class="form-control" >Send</button>
            </form>
        </div>
        
    </div>
    </div>
    <div class="container">
        
    </div>
    
    
    <div class="nav">
        <button class="btn btn-danger mb-3" onclick="window.location.href='/home'">End Call</button>
        
    </div>
    
    
</body>
</html>